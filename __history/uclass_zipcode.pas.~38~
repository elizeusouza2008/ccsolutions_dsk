unit uclass_zipcode;

interface

uses
  System.Classes, ACBrCEP;

type
  TZipcode = class(TComponent)
  private
    { private declarations }
    FZipcode, FAddress, FStreet, FCity, FState, FComplement: string;
    ACBrCEP: TACBrCEP;
  protected
    { protected declarations }
  public
    { public declarations }
    procedure httpZipcode;
    procedure zipcode(zipcode: string);
    procedure consultZipcode(zipcode, Address, Street, City, State,
      Complement: string);
    destructor Destroy; override;
    constructor Create(acbr: TACBrCEP);
  published
    { published declarations }
  end;

implementation

{ TZipcode }

procedure TZipcode.zipcode(zipcode: string);
begin
  ACBrCEP.BuscarPorCEP(zipcode)
end;

procedure TZipcode.consultZipcode(zipcode, Address, Street, City, State,
  Complement: string);
begin
  zipcode := FZipcode;
  Address := FAddress;
  Street := FStreet;
  City := FCity;
  State := FState;
end;

constructor TZipcode.Create(acbr: TACBrCEP);
begin
  ACBrCEP := acbr;
end;

destructor TZipcode.Destroy;
begin
  inherited;
end;

procedure TZipcode.httpZipcode;
var
  I: integer;
begin
  for I := 0 to ACBrCEP.Enderecos.Count - 1 do
  begin
    FZipcode := ACBrCEP.Enderecos[I].CEP;
    FAddress := ACBrCEP.Enderecos[I].Logradouro;
    FStreet := ACBrCEP.Enderecos[I].Bairro;
    FComplement := ACBrCEP.Enderecos[I].Complemento;
    FCity := ACBrCEP.Enderecos[I].Municipio;
    FState := ACBrCEP.Enderecos[I].UF;
  end;
end;

end.
